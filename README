[概要]
・ハッシュテーブル
　・C++
　・チェイン法
　・挿入した要素のハッシュコードは記憶される (再計算はされない)
　・要素(ノード)用の領域は、独自のアロケータで管理
　　・要素の追加/削除ごとにnew/deleteを呼び出すことはしていない


[バージョン]
・0.0.2


[API]
・名前空間# dict

・クラス# map
　　ハッシュマップ(ハッシュテーブルクラス)。
　　テンプレート型として以下の五つを引数に取る。
　　 - Key: 要素のキーの型
　　 - Value: 要素の値の型
　　 - Hash: Keyに適用するハッシュ関数(ファンクタ)。デフォルトはdict:hashクラス。
　　 - Eql: 二つのKeyの等値性を判定する関数(ファンクタ)。デフォルトはdict:eqlクラス。
　　 - Allocator: テーブル用のメモリ領域を割り当てるためのアロケータ。基本的にはデフォルトのものをそのまま使用する。

--
tempalte<Key, Value, Hash, Eql, Allocator>
class map {
public:
  map(rehash_threshold=0.75);
  Value* find(const Key& key);  // 対応する要素が存在しない場合はNULLを返す。
  Value& operator[](const Key& key);  // 対応する要素が存在しない場合はValue()で初期化(挿入)される。
  bool erase(const Key& key);   // 要素が存在した場合はtrueを返す。
  void clear();
  unsigned size();

  template<class Callback>  // 要素を走査し、それぞれに対して fn(Key,Value) を呼び出す。
  void each(const Callback& fn) const; 
};

[参照]
